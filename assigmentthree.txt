-Fr√•ga 3
Skapa ett program som skall fylla p√• en t√•gvagn. Det finns 10
platser i vagnen. I vagnens fr√§msta del finns det 2 stycken 1:
klass platser, de har sittplatserna 1‚Äî2, I vagnens mitt, finns det
ett bord med 4 tillh√∂rande sittplatser. De har sittplatserna 4‚Äî8.
T√•get g√•r mellan Malm√∂ och Stockholm. Arv skall anv√§ndas,
t√§nk igenom vilket sorts arv du skall anv√§nda.

Del 3:1
Fyll vagnen med passagerare. Varje passagerare kommer
√§ven att bli tilldelade ett sittplatser. Efternamn och
platsnummer blir varje passagerares unika identifikation. V√§lj
l√§mplig teknik f√∂r att skapa passagerarlistan. G√∂r detta utan
inmatning.

Del 3:2
Fyll vagnen via inmatning. Anv√§ndaren skall kunna v√§lja om
de vill sitta i 1: klass och/eller en plats vid ett bord. √Ñr platsen
upptagen av andra passagerare, skall det komma n√•got sorts
meddelande om att platsen √§r upptagen.

Del 3:3
Vi forts√§tter p√• 3:2
Anv√§ndaren skall √§ven kunna v√§lja vilken destination de ska
√•ka till. De ska kunna v√§lja att √•ka till tur och retur resa Malm√∂
‚Äî N√§ssj√∂. Malm√∂ ‚Äî Link√∂ping eller Malm√∂ ‚Äî Stockholm Detta
inneb√§r att passagerarens plats som √•ker mellan Malm√∂-
N√§ssj√∂, den platsen √§r fri att boka mellan Link√∂ping ‚Äî
Stockholm.

Bonus
Del 3:4
Alla passagerare skall vara s√∂kbara, b√•de i fr√•ga om sittplats
och efternamn.



Ytterst konstig upppgift men h√§r √§r sakerna den ska kunna g√∂ra
Skapa en lista med plaster och namn s√• att ett par √§r plasts och namn 
D√§r:
1,2 √§r f√∂rsta klass 
4,5,6,7,  (8 bord) √§r sitt plaster (ja man ska sitta p√• bordet)
3,9,10 har funktions fel d√§rav kan inte anv√§ndas üíÄ

Kommer √•teranv√§nda koden fr√•n min flygplans uppgift till en b√∂rjan enbart g√∂ra det console baserat f√∂r att det √§r l√§ttare s√• (tror jag i dags l√§gger iallafall)
den koden √§r l√§gst ner

En metod f√∂r att skapa passagerare (gjorde inte s√•)
HashMap<String, String> seats= new HashMap<>();
https://www.w3schools.com/java/java_hashmap.asp

Fr√•n till funtion 
D√§r man ska kunna v√§lja mellan att √•ka fr√•n

Malm√∂
N√§ssj√∂ 
Link√∂ping 
Stockholm 

Sedan kommer det andra alternativet att v√§lja vart man ska 
S√• boroende p√• vad man skrev innan ska man v√§lja varat man ska. 

Man kan allst√• inte v√§lja samma.

Vad mer ska funktion  / class f√∂r att kunna g√∂ra ju den ska kunna kolla vem som ska √•ka, √§ven vilken plats personen vill ha
d√§r kollar programmet om platen √§r tillg√§nglig eller inte, f√∂r plasterna 3,9,10 kan man inte sitta d√§r f√∂r de √§r "Broken". 
Men f√∂r resten kan man sitta d√§r om ingen annan sitter d√§r.
Man ska kunna f√• en f√∂rbest√§med lista med folk som ska resa men √§ven valet att s√§tta ut personer sj√§lv.


En annan funktion f√∂r att kolla om persnoner sitter p√• plasten b√•de genom sittplats
och efternamn. 
Den h√§r funktion kan utnytjas f√∂r utplaceringen d√• man kan kolla om folk redan sitter d√§r eller inte.































java
import java.util.*;


public class Plane {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		HashMap<String, String> seats = new HashMap<>();
		String seatLetters = "ABCDE";
		for (char ch: seatLetters.toCharArray()) {
			for (int i = 1;i<5;i++) {
				seats.put(String.valueOf(ch) + String.valueOf(i), null);	
			}	
		}
		// Credit Carl seats 
		
		String[] names = {"Foughtsson", "Thysellsson", "Wilsonsson", "Carlev√•gsson", "Holthsson", "Hagemann-Jensensson", "Gazicsson", "Carsbrantsson", "√Öslundsson", "Loosedsson", "Bauersson", "Stolpesson", "Svensson", "Kortisson", "Kahrimanovicsson", "Hansson", "Konoerbisson", "Tinosson", "Amongsson", "Moyaisson"};
		
			
		
		
		
		while(true) {
			System.out.println("V√§lj en operation:"
					+ "\n1. Skriv ut platserna"
					+ "\n2. Fill i platserna slumpat"
					+ "\n3  L√§gg till passagerare" 
					+ "\n4. Kolla platser"
					+ "\n5. S√∂k p√• plats med passagerare"
					+ "\n6. Plannet avtar"); 
			
			String choice = sc.nextLine();
			
			
            switch (choice) {
            //Skriv ut platserna 
            case "1": {printSeats(seatLetters, seats);
            
            	break;
            }
            //Fill i platserna slumpat
            case "2": {
            	Random random = new Random();
                
                for (String lastName : names) {
                    String seatName;
                    boolean seatAssigned = false;
                    
                    while (!seatAssigned) {
                        // Slumpm√§ssigt generera rad och plats.
                        char row = seatLetters.charAt(random.nextInt(seatLetters.length()));
                        int col = random.nextInt(4) + 1;
                        seatName = String.valueOf(row) + col;
                        
                        // Kontrollera om platsen √§r ledig.
                        if (seats.get(seatName) == null) {
                            seats.put(seatName, lastName);
                            seatAssigned = true;
                        }
                    }
                }

                printSeats(seatLetters, seats); // Skriv ut uppdaterade platser.
                break;
            		
            }
            //L√§gg till passagerare
            case "3": {
            	
            	System.out.println("Ange passagerarens efternamn:");
                String lastName = sc.nextLine();
                System.out.println("Ange plats (t.ex., A1):");
                String seatName = sc.nextLine();
                
                // V√§lja plats och kontrollera √•ldersregler vid n√∂dutg√•ngen.
                // Uppdatera HashMap 'seats' med den valda platsen och passagerarens efternamn.
                
                
                if (seats.get(seatName) == null) {
                    seats.put(seatName, lastName);} //Temp l√∂sning som inte ska vara s√• h√§r
                
                printSeats(seatLetters, seats); // Skriv ut uppdaterade platser.
                break;
            	
   	
            }
            //Kolla platser
            case "4": {
            	
            	System.out.println("Ange plats (t.ex., A1) f√∂r att kontrollera om den √§r ledig eller upptagen:");
                String seatToCheck = sc.nextLine();

                if (seats.containsKey(seatToCheck)) {
                    if (seats.get(seatToCheck) == null) {
                        System.out.println("Plats " + seatToCheck + " √§r ledig.");
                    } else {
                        System.out.println("Plats " + seatToCheck + " √§r upptagen av " + seats.get(seatToCheck));
                    }
                } else {
                    System.out.println("Ogiltig platsangivelse.");
                }

            	break;	
            }
            //S√∂k p√• plats med passagerare
            case "5": {
            	
            	System.out.println("Ange passagerarens efternamn f√∂r att s√∂ka:");
                String searchLastName = sc.nextLine();
                boolean passengerFound = false;

                // Loopa igenom platserna och efters√∂k efternamnet
                for (String seat : seats.keySet()) {
                    String lastName = seats.get(seat);

                    if (lastName != null && lastName.equals(searchLastName)) {
                        System.out.println(searchLastName + " sitter p√• plats " + seat);
                        passengerFound = true;
                    }
                }

                if (!passengerFound) {
                    System.out.println(searchLastName + " hittades inte ombord p√• planet.");
                }

            	break;
            }
            //Plannet avtar
            case "6": {
            	
            	System.out.println("                                                                               \r\n"
            			+ "                ‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì                                                                  \r\n"
            			+ "                ‚ñà‚ñà‚ñë‚ñë  ‚ñí‚ñí                                                                \r\n"
            			+ "                ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà                                                              \r\n"
            			+ "                ‚ñà‚ñà      ‚ñà‚ñà                                                              \r\n"
            			+ "                ‚ñà‚ñà      ‚ñà‚ñà                                                              \r\n"
            			+ "                ‚ñà‚ñà      ‚ñà‚ñà                                                              \r\n"
            			+ "                ‚ñà‚ñà      ‚ñà‚ñà                                                              \r\n"
            			+ "                ‚ñà‚ñà      ‚ñà‚ñà                                                              \r\n"
            			+ "                ‚ñà‚ñà        ‚ñà‚ñà                                                            \r\n"
            			+ "                ‚ñà‚ñà        ‚ñë‚ñë‚ñà‚ñà                                                          \r\n"
            			+ "                ‚ñà‚ñà          ‚ñë‚ñë‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà        \r\n"
            			+ "  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà                                                              ‚ñà‚ñà      \r\n"
            			+ "    ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë                                                                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  \r\n"
            			+ "      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà          ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n"
            			+ "      ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà          ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n"
            			+ "                ‚ñì‚ñì‚ñí‚ñí        ‚ñë‚ñë‚ñì‚ñì    ‚ñí‚ñí‚ñí‚ñí      ‚ñì‚ñì‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí      ‚ñë‚ñë‚ñë‚ñë          ‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà\r\n"
            			+ "                  ‚ñà‚ñà                                                                  ‚ñà‚ñà\r\n"
            			+ "                    ‚ñà‚ñà                            ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                        ‚ñì‚ñì‚ñì‚ñì  \r\n"
            			+ "                      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      \r\n"
            			+ "                        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà      ‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë      \r\n"
            			+ "                                                  ‚ñì‚ñì‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë                            \r\n"
            			+ "																							   ");
            	sc.close();
	        	System.exit(0);
            	break;
            	
            }
            
            default: {System.out.println("Ogitligt val. F√∂rs√∂k igen."); break;}
           
            }
		
		
		
		}
		
	}
	
	public static void printSeats (String seatLetters, HashMap<String, String> seats) {
		
		for (char x : seatLetters.toCharArray()) {
    		for(int i = 1; i<5; i++) {
    			String seatName = String.valueOf(x) + String.valueOf(i);
    	
    			System.out.println(seatName + " : " + seats.get(seatName)); // Carl 
    			}
    		}
	}
	
	
	
}
